"""
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from collections import defaultdict
from functools import reduce
from operator import mul


def triangle_numbers():
    total = 0
    i = 0
    while True:
        i += 1
        total += i
        yield total


# First attempt: Check all divisors.
def count_divisors_slow(n):
    return len([x for x in range(1, n + 1) if n % x == 0])


# Second attempt: Use prime factors to generate number of divisors
def prime_factors(num):
    factors = defaultdict(lambda: 0)
    i = 2
    while num > 1:
        while num % i == 0:
            num //= i
            factors[i] += 1
        i += 1
    return factors


def count_divisors_2(n):
    factors = prime_factors(n)
    counts = [v + 1 for v in factors.values()] or [1]
    return reduce(mul, counts)


if __name__ == '__main__':
    t = triangle_numbers()
    triangle = 1
    while count_divisors_2(triangle) <= 5:
        triangle = next(t)
    print(triangle)
    while count_divisors_2(triangle) <= 500:
        triangle = next(t)
    print(triangle)

    for n in range(15):
        print(n*(n+1)//2)
